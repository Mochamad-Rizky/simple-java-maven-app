pipeline {
    agent {
        docker {
            image 'maven:3.9.2'
            args '-u root --network host -v $HOME/.m2:/root/.m2'
        }
    }
    stages {
        stage('Setup Maven') {
            steps {
                script {
                    // Create custom settings.xml with mirror configuration
                    writeFile file: 'settings.xml', text: '''
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
    <mirrors>
        <mirror>
            <id>central-secure</id>
            <name>Maven Central</name>
            <url>https://repo1.maven.org/maven2</url>
            <mirrorOf>central</mirrorOf>
        </mirror>
    </mirrors>
</settings>
'''
                    // Set DNS servers explicitly
                    sh 'echo "nameserver 8.8.8.8" > /etc/resolv.conf'
                    sh 'echo "nameserver 8.8.4.4" >> /etc/resolv.conf'
                }
            }
        }    
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                script {
                    try {
                        sh 'mvn test'
                    } finally {
                        junit 'target/surefire-reports/*.xml'
                    }
                }
            }
        }

        stage('Manual Approval') {
            steps {
                input message: 'Lanjutkan ke tahap Deploy?', ok: 'Proceed'
            }
        }

        stage('Deploy') {
            steps {
                sh './jenkins/scripts/deliver.sh'
                sleep 1

                // Archive the artifacts
                script {
                    def jarFile = sh(script: 'find target/ -name "*.jar"', returnStdout: true).trim()
                    archiveArtifacts artifacts: jarFile, fingerprint: true
                    
                    sshagent(credentials: ['1d660cae-20a2-41e2-b380-ee6962a8c6c3']) {
                        // Copy JAR file to EC2
                        sh """
                            scp -o StrictHostKeyChecking=no ${jarFile} ubuntu@52.55.5.102:/home/ubuntu/target-java/
                        """
                        
                        // Execute the JAR on EC2
                        def jarName = jarFile.split('/')[-1]
                        sh """
                            ssh -o StrictHostKeyChecking=no ubuntu@52.55.5.102 'cd /home/ubuntu/target-java && nohup java -jar ${jarName} > app.log 2>&1 &'
                        """
                    }
                }
            }
        }
    }
}